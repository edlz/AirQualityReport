{"version":3,"sources":["components/Metrics.jsx","components/Site.jsx","App.js","reportWebVitals.js","index.js"],"names":["Metrics","IP","locationString","message","loading","aqiColor","Grid","item","sm","className","length","CircularProgress","color","Site","useState","setMessage","setLocationString","setAqiColor","setIP","city","setCity","state","setState","country","setCountry","aqi","setAqi","setLoading","ipSearchError","setIpError","useEffect","getIP","then","ipv4","getDataWithIP","startsWith","setLocation","a","axios","get","res","data","ip","d","error","current","pollution","aqius","searchData","container","spacing","xs","direction","justifyContent","Button","variant","onClick","alignItems","onSubmit","e","preventDefault","TextField","id","label","required","value","onChange","target","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb693d38.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Grid, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst Metrics = ({ IP, locationString, message, loading, aqiColor }) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        IP:\r\n      </Grid>\r\n      <Grid item sm={7} className=\"metric-container\">\r\n        {IP.length > 0 ? IP : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        Location:\r\n      </Grid>\r\n      <Grid item sm={7} className=\"metric-container\">\r\n        {!loading ? locationString : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        Air Quality :\r\n      </Grid>\r\n      <Grid item sm={7} className={`metric-container level-${aqiColor}`}>\r\n        {!loading ? message : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Metrics;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Button, TextField } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\n\r\n// components\r\nimport Metrics from \"./Metrics\";\r\n// styles\r\nimport \"./Site.css\";\r\n\r\nconst Site = () => {\r\n  // messages\r\n  const [message, setMessage] = useState(\"\");\r\n  const [locationString, setLocationString] = useState(\"\");\r\n  const [aqiColor, setAqiColor] = useState(\"\");\r\n  // info\r\n  const [IP, setIP] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [aqi, setAqi] = useState(null);\r\n  // state\r\n  const [loading, setLoading] = useState(true);\r\n  const [ipSearchError, setIpError] = useState(false);\r\n\r\n  // mounting\r\n  useEffect(() => {\r\n    getIP().then((ipv4) => getDataWithIP(ipv4));\r\n  }, []);\r\n  // update locationString\r\n  useEffect(() => {\r\n    if (city.length === 0 || state.length === 0) {\r\n      setLocationString(\"\");\r\n    } else {\r\n      setLocationString(city + \", \" + state);\r\n    }\r\n    if (message.startsWith(\"Error\")) {\r\n      setLocationString(\"Error\");\r\n    }\r\n  }, [loading]);\r\n  // aqi message\r\n  useEffect(() => {\r\n    if (aqi) {\r\n      if (aqi <= 50) {\r\n        setMessage(`${aqi} - Good`);\r\n        setAqiColor(\"green\");\r\n      } else if (aqi <= 100) {\r\n        setMessage(`${aqi} - Moderate`);\r\n        setAqiColor(\"yellow\");\r\n      } else if (aqi <= 150) {\r\n        setMessage(`${aqi} - Unhealthy for Sensitive Groups`);\r\n        setAqiColor(\"orange\");\r\n      } else if (aqi <= 200) {\r\n        setMessage(`${aqi} - \tUnhealthy`);\r\n        setAqiColor(\"red\");\r\n      } else if (aqi <= 300) {\r\n        setMessage(`${aqi} - \tVery Unhealthy`);\r\n        setAqiColor(\"purple\");\r\n      } else {\r\n        setMessage(`${aqi} - \tHazardous`);\r\n        setAqiColor(\"crimson\");\r\n      }\r\n    } else {\r\n      setAqiColor(\"\");\r\n    }\r\n  }, [aqi]);\r\n  useEffect(() => {\r\n    if (message.startsWith(\"Error\")) {\r\n      setAqi(null);\r\n    }\r\n  }, [message]);\r\n\r\n  // functions\r\n  const setLocation = (city, state, country) => {\r\n    setState(state);\r\n    setCity(city);\r\n    setCountry(country);\r\n  };\r\n\r\n  const getIP = async () => {\r\n    const res = await axios.get(\r\n      \"https://v6q7nq61ab.execute-api.us-west-1.amazonaws.com/default/getAirQuality\"\r\n    );\r\n    if (res.data.ip) {\r\n      setIP(res.data.ip);\r\n      return res.data.ip;\r\n    }\r\n  };\r\n\r\n  const getDataWithIP = async (ipv4) => {\r\n    setLoading(true);\r\n    const d = await axios.get(\r\n      `https://dyrbwt49he.execute-api.us-west-1.amazonaws.com/default/getAirQuality?ip=${ipv4}`\r\n    );\r\n    if (d.data.error) {\r\n      setMessage(\"Error - \" + d.data.error);\r\n      setIpError(true);\r\n    } else if (d.data.data) {\r\n      setLocation(d.data.data.city, d.data.data.state, d.data.data.country);\r\n      setAqi(d.data.data.current.pollution.aqius);\r\n      setIpError(false);\r\n    } else {\r\n      setMessage(\"Unexpected Error\");\r\n      setIpError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const searchData = async () => {\r\n    setIpError(false);\r\n    setLoading(true);\r\n    const d = await axios.get(\r\n      `https://dyrbwt49he.execute-api.us-west-1.amazonaws.com/default/getAirQuality?state=${state}&city=${city}&country=${country}`\r\n    );\r\n    if (d.data.error || d.data.data == null) {\r\n      setMessage(\"Error - \" + d.data.error);\r\n    } else {\r\n      setLocation(d.data.data.city, d.data.data.state, d.data.data.country);\r\n      setAqi(d.data.data.current.pollution.aqius);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    searchData();\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3} className=\"main-container\">\r\n      <Grid item container spacing={3} xs={12} direction=\"row\">\r\n        <Metrics\r\n          IP={IP}\r\n          locationString={locationString}\r\n          message={message}\r\n          loading={loading}\r\n          aqiColor={aqiColor}\r\n        />\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs={12}\r\n          justifyContent=\"center\"\r\n          className=\"button-container\"\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color={ipSearchError ? \"secondary\" : \"primary\"}\r\n            onClick={() => getDataWithIP(IP)}\r\n            className=\"btn\"\r\n          >\r\n            Reload IP Search\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          sm={12}\r\n          spacing={3}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          className=\"search-container\"\r\n        >\r\n          <Grid item sm={12} container justifyContent=\"center\">\r\n            <form onSubmit={handleSearch}>\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"City\"\r\n                variant=\"filled\"\r\n                required\r\n                value={city}\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              />\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"State\"\r\n                variant=\"filled\"\r\n                required\r\n                value={state}\r\n                onChange={(e) => {\r\n                  setState(e.target.value);\r\n                }}\r\n              />\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"Country\"\r\n                variant=\"filled\"\r\n                value={country}\r\n                onChange={(e) => {\r\n                  setCountry(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n\r\n              <Button\r\n                className=\"btn\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Site;\r\n","import React from \"react\";\n\n// components\n\nimport Site from \"./components/Site\";\n\nfunction App() {\n  return <Site />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}