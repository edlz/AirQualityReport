{"version":3,"sources":["components/Metrics.jsx","components/Site.jsx","App.js","reportWebVitals.js","index.js"],"names":["Metrics","IP","locationString","message","loading","Grid","item","sm","className","length","CircularProgress","color","Site","useState","setIP","setMessage","setLocationString","city","setCity","state","setState","country","setCountry","setLoading","ipSearchError","setIpError","useEffect","a","getIP","getDataWithIP","startsWith","setLocation","axios","get","res","data","ip","d","error","current","pollution","aqius","searchData","container","spacing","xs","direction","justifyContent","Button","variant","onClick","alignItems","onSubmit","e","preventDefault","TextField","id","label","required","value","onChange","target","type","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b5d2c4c.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport { Grid, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst Metrics = ({ IP, locationString, message, loading }) => {\r\n  return (\r\n    <Fragment>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        IP:\r\n      </Grid>\r\n      <Grid item sm={7} className=\"metric-container\">\r\n        {IP.length > 0 ? IP : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        Location:\r\n      </Grid>\r\n      <Grid item sm={7} className=\"metric-container\">\r\n        {!loading ? locationString : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n      <Grid item sm={5} className=\"label-container\">\r\n        Air Quality :\r\n      </Grid>\r\n      <Grid item sm={7} className=\"metric-container\">\r\n        {!loading ? message : <CircularProgress color=\"secondary\" />}\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Metrics;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Button, TextField } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\n\r\n// components\r\nimport Metrics from \"./Metrics\";\r\n// styles\r\nimport \"./Site.css\";\r\n\r\nconst Site = () => {\r\n  // state\r\n  const [IP, setIP] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [locationString, setLocationString] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [ipSearchError, setIpError] = useState(false);\r\n\r\n  // mounting\r\n  useEffect(async () => {\r\n    await getIP();\r\n    getDataWithIP();\r\n  }, []);\r\n  // update locationString\r\n  useEffect(() => {\r\n    if (city.length == 0 || state.length == 0) {\r\n      setLocationString(\"\");\r\n    } else {\r\n      setLocationString(city + \", \" + state);\r\n    }\r\n    if (message.startsWith(\"Error\")) {\r\n      setLocationString(\"Error\");\r\n    }\r\n  }, [loading]);\r\n\r\n  // functions\r\n  const setLocation = (city, state, country) => {\r\n    setState(state);\r\n    setCity(city);\r\n    setCountry(country);\r\n  };\r\n\r\n  const getIP = async () => {\r\n    const res = await axios.get(\r\n      \"https://v6q7nq61ab.execute-api.us-west-1.amazonaws.com/default/getAirQuality\"\r\n    );\r\n    if (res.data.ip) {\r\n      setIP(res.data.ip);\r\n      return res.data.ip;\r\n    }\r\n  };\r\n\r\n  const getDataWithIP = async () => {\r\n    setLoading(true);\r\n    const d = await axios.get(\r\n      `https://dyrbwt49he.execute-api.us-west-1.amazonaws.com/default/getAirQuality?ip=${IP}`\r\n    );\r\n    if (d.data.error) {\r\n      setMessage(\"Error - \" + d.data.error);\r\n      setIpError(true);\r\n    } else if (d.data.data) {\r\n      setLocation(d.data.data.city, d.data.data.state, d.data.data.country);\r\n      setMessage(`${d.data.data.current.pollution.aqius}`);\r\n      setIpError(false);\r\n    } else {\r\n      setMessage(\"Error\");\r\n      setIpError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const searchData = async () => {\r\n    setIpError(false);\r\n    setLoading(true);\r\n    const d = await axios.get(\r\n      `https://dyrbwt49he.execute-api.us-west-1.amazonaws.com/default/getAirQuality?state=${state}&city=${city}&country=${country}`\r\n    );\r\n    if (d.data.error || d.data.data == null) {\r\n      setMessage(\"Error\");\r\n    } else {\r\n      setLocation(d.data.data.city, d.data.data.state, d.data.data.country);\r\n      setMessage(`US AQI ${d.data.data.current.pollution.aqius}`);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    e.preventDefault();\r\n    searchData();\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3} className=\"main-container\">\r\n      <Grid item container spacing={3} xs={12} direction=\"row\">\r\n        <Metrics\r\n          IP={IP}\r\n          locationString={locationString}\r\n          message={message}\r\n          loading={loading}\r\n        />\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          xs={12}\r\n          justifyContent=\"center\"\r\n          className=\"button-container\"\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color={ipSearchError ? \"secondary\" : \"primary\"}\r\n            onClick={getDataWithIP}\r\n            className=\"btn\"\r\n          >\r\n            Reload IP Search\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          sm={12}\r\n          spacing={3}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          className=\"search-container\"\r\n        >\r\n          <Grid item sm={12} container justifyContent=\"center\">\r\n            <form onSubmit={handleSearch}>\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"City\"\r\n                variant=\"filled\"\r\n                required\r\n                value={city}\r\n                onChange={(e) => {\r\n                  setCity(e.target.value);\r\n                }}\r\n              />\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"State\"\r\n                variant=\"filled\"\r\n                required\r\n                value={state}\r\n                onChange={(e) => {\r\n                  setState(e.target.value);\r\n                }}\r\n              />\r\n              <TextField\r\n                className=\"search-input\"\r\n                id=\"filled-basic\"\r\n                label=\"Country\"\r\n                variant=\"filled\"\r\n                value={country}\r\n                onChange={(e) => {\r\n                  setCountry(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n\r\n              <Button\r\n                className=\"btn\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Search\r\n              </Button>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Site;\r\n","import React from \"react\";\n\n// components\n\nimport Site from \"./components/Site\";\n\nfunction App() {\n  return <Site />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}